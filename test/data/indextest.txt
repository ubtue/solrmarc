# 0 
record: specTestRecs.mrc(u8)
indexSpec: id = 001, first
expect: u8

# 1
record: 1156470.mrc
indexSpec: 035a, map("[(][Oo][Cc][Oo][Ll][Cc][)][^0-9]*[0]*([0-9]+)=>$1","ocm[0]*([0-9]+)[ ]*[0-9]*=>$1","ocn[0]*([0-9]+).*=>$1", "on[0]*([0-9]+).*=>$1")
expect: 12275114

# 2  test loading a indexspec that references a pattern map defined in the same properties file
record: 1156470.mrc
indexSpec: oclc_pattern_map_test.properties(oclc_num)
expect: 12275114

# 3 
record: 1156470.mrc
indexSpec: oclc_p_num = 035a, oclc_num_pattern_map.properties(oclc_num)
expect: 12275114

# 4
record: specTestRecs.xml
indexSpec: subject_facet =600[a-z]:610[a-z]:611[a-z]:630[a-z]:650[a-z]:651[a-z]:655[a-z]:690[a-z], join (" -- "), cleanEnd, unique
expect: Translating and interpreting -- Soviet Union -- History|Russian literature -- Translations from foreign languages -- History and criticism

# 5
record: title_k.mrc
indexSpec: custom, getSortableTitle
expect: morton hoffman papers

# 6  test with unicode normalization turned on
readerProps: marc.permissive=true, marc.to_utf_8=true, marc.unicode_normalize=C 
record: u4.mrc(u4) 
indexSpec: 245a 
#The princes of H\u00E0-ti\u00EAn (1682-1867) /
expect: The princes of Hà-tiên (1682-1867) /

# 7  same test with unicode normalization turned off
readerProps: marc.permissive=true, marc.to_utf_8=true, marc.unicode_normalize=false 
record: u4.mrc(u4)
indexSpec: 245a
#The princes of Ha\u0300-tie\u0302n (1682-1867) /
expect: The princes of Hà-tiên (1682-1867) /

# 8  test reading XML file with initial BOM
record: specTestRecs_withBOM.xml(u55)
indexSpec: id = 001, first
expect: u55

# 9  test reading XML file with no prolog
record: specTestRecs_no_Prolog.xml(u10489)
indexSpec: id = 001, first
expect: u10489

#10  test reading single record Koha XML file without <collection> 
record: 1474920681_KOHA_LFL_5.xml
indexSpec: id = 245a
expect: Cinema and architecture : from historical to digital /

#11  test reading single record Koha XML file without <collection> that starts with a comment
record: 1474920681_KOHA_LFL_6_with_comment.xml
indexSpec: id = 245a, cleanEnd
expect: Cinema and architecture : from historical to digital

#12  Test running a bean shell script returning a set
record: u399.mrc
indexSpec: pubdategroup = script(PubDateGroups.bsh), getPubDateGroups
expect: Last 50 years

#13  Test running a bean shell script returning a String
record: u399.mrc
indexSpec: pubdategroup = script(getdate.bsh), getDate
expect: 1983

#14
record: u55.mrc
indexSpec: custom, getCallNumbersCleanedNewNo050(true)
expect: PR4231.A43 1984 (13 volumes)

#15
record: u60.mrc
indexSpec: custom, getCallNumbersCleanedNewNo050(true)
expect: DP269.27.S67 H47 1982  V.1, V.2

#16
record: u60.mrc
indexSpec: 999i
expect: X000872036|X000872037

#17
record: u8738.mrc
indexSpec: language_facet.properties(language_facet)
expect: English|French (translated from)

#18
record: u392.mrc
indexSpec: language_facet.properties(language_facet)
expect: Russian|English (also in)

#19  testing the interaction of stripInd2 and substring
# the field value is : 245 13$aAn introduction to Vietnamese literature /
record: u8738.mrc
indexSpec: title_start = 245a, substring(0,5), stripInd2
expect: intro

#20  testing the interaction of stripInd2 and position based selection [num1, num2]
# the field value is : 245 13$aAn introduction to Vietnamese literature /
# note the position based selection operation extracts from num1 to num2
# whereas the substring(num1, num2) extracts from num1 to num2-1
record: u8738.mrc
indexSpec: title_start = 245a[0-4], stripInd2
expect: intro

#21  testing the interaction of stripInd2, substring and separate
# the field value is : 245 13$aAn introduction to Vietnamese literature /$cMaurice M. Durand and Nguyen Tran Huan
record: u8738.mrc
indexSpec: title_part3 = 245[ac], substring(0,5), separate, stripInd2
expect: intro|Mauri

#22  testing error correction of Russian record with erroneous subfield separator in the middle of a Cyrillic string
record: u5278992.mrc
indexSpec: pub = LNK260b, first, clean
expect: ЭКсмо

#23  testing error correction of Russian record with erroneous subfield separator in the middle of a Cyrillic string
readerProps: marc.permissive=false, marc.to_utf_8=true 
record: u5278992.mrc
indexSpec: pub = LNK260b, first, clean
expect: 

#24  testing stripInd2 on a record where the ind2 is 4 and the 245a field is "Job :" if steps are performed in the wrong
# the index method will throw a index out of bounds exception, but it shouldn't
record: datos-20161010-ajob.mrc
indexSpec: title = 245a, clean, stripInd2
expect: 

#25  testing stripInd2 on a record where the ind2 is 4 and the 245a field is "Job :" if steps are performed in the wrong
# the index method will throw a index out of bounds exception, but it shouldn't
record: datos-20161010-ajob.mrc
indexSpec: title = 245a,  stripInd2
expect: :

#26  testing numeric subfields in specifications
record: datos-20161010-ajob.mrc
indexSpec: 9522
expect: DEWEY

#27  testing numeric subfields in specifications
record: datos-20161010-ajob.mrc
indexSpec: 952[2]
expect: DEWEY

#28 testing ctrl fields
record: u5278992.mrc
indexSpec: 008[35-37]
expect: rus

#29 testing author with bad relator code
record: kan1222221.mrc
indexSpec: author_added_entry_text = 710abcdeq4
expect: 3DD Group (Firm),$4dst|Kanopy (Firm),$4dst

#30 testing author with bad relator code using MarcFilteredReader edit specification 
readerProps: marc.reader.remap=video_recs_map.properties
record: kan1222221.mrc
indexSpec: author_added_entry_text = 710abcdeq4
expect: 3DD Group (Firm)|Kanopy (Firm)

#31 test non-filing characters in title in greek record.
record: greek_non-filing_tests.mrc
indexSpec: 245ab, stripInd2, join(" ")
expect: δοκιμαστικός τίτλος

#32 test non-filing characters in title in greek record.
record: greek_non-filing_tests.mrc
indexSpec: 245ab, titleSortLower, join(" ")
expect: δοκιμαστικος τιτλος

#33 test sorted results
record: demoRecs.mrc(u6867336)
indexSpec: 650a, sort(str, asc)
expect:*ordered*Battles|Families|Northmen|Vikings

#34 test ordered results
record: demoRecs.mrc(u6867336)
indexSpec: 650a
expect:*ordered*Vikings|Families|Northmen|Battles

#35 test constant indexer
record: specTestRecs.mrc(u8)
indexSpec: constantVal = "First"|"second"|"third", notfirst
expect: second|third

#36 test numeric sort
record: demoRecs.mrc
indexSpec: isbn_text = 020a,  custom_map(org.solrmarc.mixin.ISBNNormalizer,  filterISBN(10)), unique, sort(num, asc)
expect:*ordered*0877663343|0877663637

#37 test string sort and custom_map
record: demoRecs.mrc(u907)
indexSpec: lc = 050ab:999a ? ($w = "LC"), clean, join(" "), custom_map(org.solrmarc.callnum.CallNumberMixin,  LCCallNumberShelfKey), sort(str, desc)
expect:*ordered*TD 3898 S59 41984|TD 3812 S63 41984

#38 test inline map
record: specTestRecs.mrc(u333)
indexSpec: music_facet = 999a[0-1] ?($a matches "M.*" & $w = "LC"), map("ML=> Music Literature","MT=>Music Theory","M2=>Monuments of Music","M3=>Composers' Collected Works","M.=>Printed Music"), first
expect: Monuments of Music

#39 test inline map using single string
record: specTestRecs.mrc(u333)
indexSpec: scores_test = 000[6]?([6] ~ "[cdj]"), map("[cd]=>Scores||[j]=>Recordings||[cdj]=>Recordings and/or Scores")
expect: Scores|Recordings and/or Scores

#40 test different ways of specifying custom methods
record: u399.mrc
indexSpec: custom(org.solrmarc.mixin.MusicEra), getEra, music_maps.properties(composition_era)
expect: 1970's|20th Century

#41 test different ways of specifying custom methods
record: u399.mrc
indexSpec: custom, getEra, music_maps.properties(composition_era)
expect: 1970's|20th Century

#42 test different ways of specifying custom methods
record: u399.mrc
indexSpec: org.solrmarc.mixin.MusicEra::getEra, music_maps.properties(composition_era)
expect: 1970's|20th Century

#43 test different ways of specifying custom methods
record: u399.mrc
indexSpec: getEra, music_maps.properties(composition_era)
expect: 1970's|20th Century

#44 test different ways of specifying custom maps
record: u6909669.mrc
indexSpec: date_received = custom, getFromFileBy001("extra_data/booklists_all_20161128.txt", "[|]", null), custom_map(org.solrmarc.mixin.FileLookupMixin mapLookupSelect("[|]",0))
expect: 20161116

#45 test different ways of specifying custom maps
record: u6909669.mrc
indexSpec: date_received = org.solrmarc.mixin.FileLookupMixin::getFromFileBy001("extra_data/booklists_all_20161128.txt", "[|]", ""), org.solrmarc.mixin.FileLookupMixin::mapLookupSelect("[|]",0)
expect: 20161116

#46 test different ways of specifying custom maps
record: u6909669.mrc
indexSpec: date_received = getFromFileBy001("extra_data/booklists_all_20161128.txt", "[|]", ""), mapLookupSelect("[|]",0)
expect: 20161116

#47 test different ways of specifying custom maps
record: u6909669.mrc
indexSpec: fund_code = getFromFileBy001("extra_data/booklists_all_20161128.txt", "[|]", ""), mapLookupSelect("[|]", 1), mapLookupSplit(":")
expect: TUNSTALL-RBT-ER00604|UL-PROCESS

#48 test short form of custom map for filterISBN
record: u6909669.mrc
indexSpec: isbn = 020a, filterISBN(13), sort(num, asc)
expect: *ordered*9781595585301|9781595588197

#49 test new multi-line specification
record: u6909669.mrc
indexSpec: oclc_pattern_map_test.properties(fund_code)
expect: *ordered*UL-PROCESS|TUNSTALL-RBT-ER00604

#50
record: u233.mrc
indexSpec: tht = 500a, toLower,  filter("f=>ff","english=>eggrish","[,.]=>")  
expect: ffrench eggrish german and spanish

#51
record: u399.mrc
indexSpec: title_browse = 245ab?(ind2 > 0), stripInd2, clean
expect: ship of death

#52
record: specTestRecs.mrc(u27)
indexSpec: title_browse = 245ab?(ind2 > 0), stripInd2, clean
expect:

#53
record: specTestRecs.mrc(testHebrew1)
indexSpec: title_noc = custom, getAllAlphaExcept("245c:260b")
expect: Optsyah poʼeṭit : 2 meshorerim /|Yerushalayim : 2006.